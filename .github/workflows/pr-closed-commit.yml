# This is a basic workflow to help you get started with Actions

name: merge commit - build files size

on:
  pull_request:
    #  types:
      # - closed
     branches:    
      - 'main'

jobs:
  checkLabels:
    runs-on: ubuntu-latest
    if: ${{github.event.pull_request.labels.*.name[0]}}
    steps:
      - run: echo Check labels is not empty

  pre_commitFile:
    needs: [checkLabels]
    environment: production
    # if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.TESTINGTOKEN }}
      SSH: "${{ secrets.SSH }}"
    strategy:
      matrix:
        label: ["bug", "web"]

    steps:
        - name: setup checkout
          if: ${{ contains(github.event.pull_request.labels.*.name, matrix.label) }}
          uses: actions/checkout@v2

        - name: setup node
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          uses: actions/setup-node@v1
          with:
              node-version: 14.11.0
        
        - name: Prune fetch
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          run: git fetch --prune --unshallow

        - name: Creating env packagePath and assigning value to it
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          run: |
            if [ ${{matrix.label}} = "bug" ]
            then
              echo "packagePath=src" >> $GITHUB_ENV
              echo "path set to the src"
            else
              echo packagePath=public >> $GITHUB_ENV
              echo "packagePath set to the public"
            fi

        - name: Setting up
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          uses: webfactory/ssh-agent@v0.4.1
          with:
              ssh-private-key: ${{ secrets.SSH  }}

        - name: Get size of ${{env.packagePath}} and add to size-${{env.packagePath}}.txt
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          working-directory: "./${{env.packagePath}}/"
          run: |
              du -hc ./* > size-${{env.packagePath}}.txt 

        - name: move size-${{env.packagePath}}.txt  to stats folder
          if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          run: |
            cat ${{env.packagePath}}/size-${{env.packagePath}}.txt
            mv ${{env.packagePath}}/size-${{env.packagePath}}.txt stats/


        - name: Commit files
          working-directory: stats
          run : ls 

        - name: Archive code coverage results
          uses: actions/upload-artifact@v3
          with:
            name: size-${{env.packagePath}}.txt
            path: stats/size-${{env.packagePath}}.txt

        # - name: Push to git
          # if: ${{ success() && contains(github.event.pull_request.labels.*.name, matrix.label) }}
          # if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
          # run: |
              # git config user.email "amandhunna.dev@gmail.com"
              # git config user.name "amandhunna"
              # git remote set-url origin "git@github.com:${{ github.repository }}"
              # git fetch
              # echo size-${{env.packagePath}}.txt  >> commit.txt
              # echo `git add . && git commit -m "feat: masterBuild.txt file" --no-verify && git push origin $GITHUB_BASE_REF`

  commitFile:
    runs-on: ubuntu-latest
    needs: [pre_commitFile]
    steps:    
      - name: setup checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: [ size-src.txt, size-public.txt ]
    
      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Commit files
        working-directory: stats
        run : ls 
